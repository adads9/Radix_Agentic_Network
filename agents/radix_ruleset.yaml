# Radix Spectral ruleset – May 2025
formats: ["yaml","yml"]

rules:
  # ────────── Top-level sanity ──────────
  radix-api-version:
    description: apiVersion must be radix.equinor.com/v1
    severity: error
    given: $.apiVersion
    then:
      function: pattern
      functionOptions: { match: "^radix\\.equinor\\.com\\/v1$" }   #  ✔ spec  :contentReference[oaicite:0]{index=0}

  radix-kind:
    description: kind must be RadixApplication
    severity: error
    given: $.kind
    then:
      function: pattern
      functionOptions: { match: "^RadixApplication$" }            #  ✔ spec  :contentReference[oaicite:1]{index=1}

  unknown-spec-keys:
    description: Disallow unknown fields under spec
    severity: error
    given: $.spec
    then:
      function: schema
      functionOptions:
        schema:
          type: object
          properties: { build: {}, environments: {}, components: {} }
          additionalProperties: false                             #  flags buildRules/promotion  :contentReference[oaicite:2]{index=2}

  # ────────── Components ──────────
  component-name-case:
    description: component names must be kebab-case
    severity: error
    given: $.spec.components[*].name
    then:
      function: pattern
      functionOptions: { match: "^[a-z0-9-]+$" }                  #  ✔ examples  :contentReference[oaicite:3]{index=3}

  dockerfile-key:
    description: require dockerfileName **or** dockerfile
    severity: error
    given: $.spec.components[*]
    then:
      function: or
      functionOptions: { properties: ["dockerfileName","dockerfile"] }  #  ✔ build guide  :contentReference[oaicite:4]{index=4}

  ports-array-valid:
    description: ports must be an array of objects with name+port
    severity: error
    given: $.spec.components[*].ports
    then:
      function: schema
      functionOptions:
        schema:
          type: array
          items:
            type: object
            required: [name, port]

  publicPort-valid:
    description: publicPort must match ports[].name
    severity: error
    given: $.spec.components[*]
    then:
      field: publicPort
      function: enumeration
      functionOptions:
        values:
          - "$..ports[*].name"                                    # Spectral 7 resolves this JSONPath  :contentReference[oaicite:5]{index=5}

  component-unknown-keys:
    description: Disallow unknown keys in a component
    severity: error
    given: $.spec.components[*]
    then:
      function: schema
      functionOptions:
        schema:
          type: object
          properties:
            name: {}
            src: {}
            dockerfileName: {}
            dockerfile: {}
            image: {}
            ports: {}
            publicPort: {}
            secrets: {}
            variables: {}
            healthChecks: {}
            replicas: {}
            resources: {}
            environmentConfig: {}
          additionalProperties: false

  # ────────── Health checks ──────────
  health-check-path:
    description: readiness/liveness path must start with /
    severity: error
    given: $.spec.components[*].healthChecks.*.path              #  new component-level placement  :contentReference[oaicite:6]{index=6}
    then:
      function: pattern
      functionOptions: { match: "^/" }

  # ────────── Build & env ──────────
  triggerPath-required:
    given: $.spec.build.triggerPath
    severity: error
    then: { function: truthy }                                   #  replaces buildRules  :contentReference[oaicite:7]{index=7}

  replicas-limit:
    given: $.spec.components[*].environmentConfig[*].replicas
    severity: warning
    then:
      function: lessThanOrEqualTo
      functionOptions: { value: 10 }

  env-var-style:
    given: $.spec.components[*].environmentConfig[*].variables..*
    severity: warning
    then:
      function: pattern
      functionOptions: { match: "^[A-Z0-9_]+$" }
